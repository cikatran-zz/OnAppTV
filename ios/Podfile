# Uncomment the next line to define a global platform for your project
source 'https://github.com/brightcove/BrightcoveSpecs.git'
source 'https://github.com/CocoaPods/Specs.git'
platform :ios, '10.0'

target 'OnAppTV' do
  # Uncomment the next line if you're using Swift or would like to use dynamic frameworks
  #pod 'RNVectorIcons', :path => '../node_modules/react-native-vector-icons'
  
  #pod 'react-native-orientation', :path => '../node_modules/react-native-orientation'
  use_frameworks!

  # Pods for OnAppTV
  pod 'Brightcove-Player-Core/dynamic'
  pod 'UserKit', :path => '../../mStage-UserKit-iOS-SDK'
  pod 'UserKitIdentity', :path => '../../mStage-UserKit-iOS-SDK'
  pod 'Kingfisher'
  pod 'IQKeyboardManagerSwift', '4.0.13'
  pod 'FacebookCore'
  pod 'FacebookLogin'
  pod 'FacebookShare'
  pod 'PromiseKit', '~> 4.0'

end

post_install do |installer|
    target = installer.pods_project.targets.first
    phase = target.new_shell_script_build_phase('Run Script')
    phase.shell_script = "if nc -w 5 -z localhost 8081 ; then\n  if ! curl -s \"http://localhost:8081/status\" | grep -q \"packager-status:running\" ; then\n    echo \"Port 8081 already in use, packager is either not running or not running correctly\"\n    exit 2\n  fi\nelse\n  open $SRCROOT/../node_modules/react-native/packager/launchPackager.command || echo \"Can't start packager automatically\"\nfi"
    installer.pods_project.targets.each do |target|
        if target.name == 'yoga'
            target.build_configurations.each do |config|
                config.build_settings['GCC_TREAT_WARNINGS_AS_ERRORS'] = 'NO'
                config.build_settings['GCC_WARN_64_TO_32_BIT_CONVERSION'] = 'NO'
            end
        end
        target.build_configurations.each do |config|
            config.build_settings['ENABLE_BITCODE'] = 'YES'
        end
    end
end

#post_install do |installer|
#    installer.pods_project.targets.each do |target|
#        target.build_configurations
#        if target.name.start_with? 'UserKit'
#            target.build_configurations.each do |config|
#                if config.name == 'Debug'
#                    config.build_settings['SWIFT_ACTIVE_COMPILATION_CONDITIONS'] = ['DEBUG', 'STAGING_SERVER']
#                    puts "Using STAGING_SERVER for #{target.name} #{config.name} builds"
#                else if config.name == 'Release Staging'
#                    config.build_settings['SWIFT_ACTIVE_COMPILATION_CONDITIONS'] = ['STAGING_SERVER']
#                    puts "Using STAGING_SERVER for #{target.name} #{config.name} builds"
#                end
#                end
#            end
#        else if target.name == 'OnAppTV'
#            target.build_configurations.each do |config|
#                if config.name == 'Debug Production'
#                    config.build_settings['CONFIGURATION_TEMP_DIR'] = '$(PROJECT_TEMP_DIR)/Debug$(EFFECTIVE_PLATFORM_NAME)'
#                    config.build_settings['CONFIGURATION_BUILD_DIR'] = '$(PROJECT_TEMP_DIR)/Debug$(EFFECTIVE_PLATFORM_NAME)'
#                else if config.name == 'Release Staging'
#                    config.build_settings['CONFIGURATION_TEMP_DIR'] = '$(PROJECT_TEMP_DIR)/Release$(EFFECTIVE_PLATFORM_NAME)'
#                    config.build_settings['CONFIGURATION_BUILD_DIR'] = '$(PROJECT_TEMP_DIR)/Release$(EFFECTIVE_PLATFORM_NAME)'
#                end
#                end
#            end
#        end
#        end
#    end
#end

